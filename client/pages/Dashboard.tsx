import { useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";

function readLS(key: string) {
  try {
    return localStorage.getItem(key) || "";
  } catch {
    return "";
  }
}

function writeLS(key: string, value: string) {
  try {
    localStorage.setItem(key, value);
  } catch {}
}

function generateCoverLetter(job: string, resume: string) {
  const companyMatch = job.match(/(?:–≤|–≤ –∫–æ–º–ø–∞–Ω–∏—é|company|–∫–æ–º–ø–∞–Ω–∏—è)\s+([A-Za-z–ê-–Ø–∞-—è0-9\-\s"']{2,})/i);
  const company = companyMatch?.[1]?.trim().replace(/["']+/g, "");
  const roleMatch = job.match(/(?:–Ω–∞|for|–ø–æ–∑–∏—Ü–∏—é|—Ä–æ–ª—å)\s+([A-Za-z–ê-–Ø–∞-—è0-9\-\s"']{2,})/i);
  const role = roleMatch?.[1]?.trim().replace(/["']+/g, "");

  const strengths = (resume || job)
    .split(/\n|,|‚Ä¢|-/)
    .map((s) => s.trim())
    .filter(Boolean)
    .slice(0, 5);

  const bullets = strengths
    .map((s) => `‚Ä¢ ${s.replace(/^\p{P}+/u, "")}`)
    .join("\n");

  return (
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n` +
    `–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è${role ? ` ¬´${role}¬ª` : ""}${company ? ` –≤ ${company}` : ""}. ` +
    `–Ø –ø—Ä–∞–∫—Ç–∏–∫—É—é Data‚Äëdriven –ø–æ–¥—Ö–æ–¥ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. –í–æ—Ç –ø–æ—á–µ–º—É —è –ø–æ–¥—Ö–æ–∂—É: \n\n` +
    `${bullets || "‚Ä¢ –û–ø—ã—Ç –≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n‚Ä¢ –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—Å—å –∏ –±–µ—Ä—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"}\n\n` +
    `–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! üöÄ`
  );
}

export default function Dashboard() {
  const [job, setJob] = useState("");
  const [resume, setResume] = useState("");
  const [letter, setLetter] = useState("");
  const [open, setOpen] = useState(false);

  useEffect(() => {
    const j = readLS("interview.job");
    const r = readLS("interview.resume");
    setJob(j);
    setResume(r);
  }, []);

  const name = useMemo(() => {
    const m = resume.match(/(^|\s)([A-Z–ê-–Ø][a-z–∞-—è]+\s+[A-Z–ê-–Ø][a-z–∞-—è]+)/);
    return m?.[2] || "–ì–æ—Å—Ç—å";
  }, [resume]);

  return (
    <div className="space-y-8">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-extrabold tracking-tight sm:text-4xl">Hey {name} <span className="align-middle">üëã</span></h1>
        <p className="text-muted-foreground max-w-2xl">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞ –±–∞–∑–µ –ò–ò. –ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.</p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card className="shadow-[0_8px_30px_rgba(0,0,0,0.06)]">
          <CardHeader>
            <CardTitle>–ò–Ω—Ç–µ—Ä–≤—å—é –≥–æ—Ç–æ–≤–æ ‚úÖ</CardTitle>
            <CardDescription>–í–∞–∫–∞–Ω—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ì–æ–ª–æ—Å –∏ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.</CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap items-center gap-3 pt-0">
            <Dialog open={open} onOpenChange={setOpen}>
              <DialogTrigger asChild>
                <Button className="rounded-full bg-black px-6 text-white hover:bg-black/90">–ù–∞—á–∞—Ç—å</Button>
              </DialogTrigger>
              <DialogContent className="max-w-3xl">
                <DialogHeader>
                  <DialogTitle>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é üé§</DialogTitle>
                </DialogHeader>
                <InterviewPanel job={job} />
              </DialogContent>
            </Dialog>
            <Button variant="outline" onClick={() => {
              writeLS("interview.job", "");
              writeLS("interview.resume", "");
              location.href = "/";
            }}
            >–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</Button>
          </CardContent>
        </Card>

        <Card className="shadow-[0_8px_30px_rgba(0,0,0,0.06)]">
          <CardHeader>
            <CardTitle>–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ ‚úçÔ∏è</CardTitle>
            <CardDescription>–ü–∏—Å—å–º–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ. –ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <Textarea value={letter} onChange={(e) => setLetter(e.target.value)} className="min-h-48 rounded-2xl bg-secondary/50" placeholder="–ù–∞–∂–º–∏—Ç–µ \"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å\"" />
            <div className="flex flex-wrap gap-2">
              <Button className="rounded-full" onClick={() => setLetter(generateCoverLetter(job, resume))}>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</Button>
              <Button variant="secondary" className="rounded-full" onClick={() => setLetter(generateCoverLetter(job + "\n" + Date.now(), resume))}>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚ôªÔ∏è</Button>
              <Button variant="outline" className="rounded-full" onClick={() => { navigator.clipboard.writeText(letter); }}>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å üìã</Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card className="shadow-[0_8px_30px_rgba(0,0,0,0.06)]">
        <CardHeader>
          <CardTitle>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è</CardTitle>
          <CardDescription>–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="rounded-2xl border bg-white p-4 text-sm leading-6 text-muted-foreground">{job ? job : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."}</div>
          <Separator />
          <div className="text-xs text-muted-foreground">–°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫–ª—é—á–µ–≤ÔøΩÔøΩ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ.</div>
        </CardContent>
      </Card>
    </div>
  );
}

function InterviewPanel({ job }: { job: string }) {
  const [messages, setMessages] = useState<{ role: "ai" | "user"; text: string }[]>([
    { role: "ai", text: "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è. –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ." },
  ]);
  const [input, setInput] = useState("");
  const [listening, setListening] = useState(false);

  // Speech Synthesis for AI voice
  const speak = (text: string) => {
    try {
      const utter = new SpeechSynthesisUtterance(text);
      utter.lang = "ru-RU";
      speechSynthesis.cancel();
      speechSynthesis.speak(utter);
    } catch {}
  };

  useEffect(() => {
    // Speak last AI message
    const last = messages[messages.length - 1];
    if (last?.role === "ai") speak(last.text);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [messages.length]);

  // Optional Speech Recognition (if supported)
  useEffect(() => {
    if (!listening) return;
    // @ts-ignore
    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SR) return;
    // @ts-ignore
    const rec = new SR();
    rec.lang = "ru-RU";
    rec.interimResults = false;
    rec.onresult = (e: any) => {
      const text = Array.from(e.results).map((r: any) => r[0].transcript).join(" ");
      submit(text);
    };
    rec.onend = () => setListening(false);
    rec.start();
    return () => {
      try { rec.stop(); } catch {}
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [listening]);

  const submit = (text: string) => {
    if (!text.trim()) return;
    const next = text.trim();
    setMessages((m) => [...m, { role: "user", text: next }]);
    const followUp = next.length < 20
      ? "–†–∞—Å–∫—Ä–æ–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫–æ–π –±—ã–ª –≤–∞—à –≤–∫–ª–∞–¥?"
      : pickFollowUp(job);
    setMessages((m) => [...m, { role: "user", text: next }, { role: "ai", text: followUp }]);
    setInput("");
  };

  return (
    <div className="grid gap-4 md:grid-cols-2">
      <div className="rounded-2xl border bg-white p-4">
        <div className="mb-2 flex items-center gap-2 text-sm font-medium">üìù –°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞</div>
        <div className="h-64 overflow-y-auto space-y-2 text-sm">
          {messages.map((m, i) => (
            <div key={i} className={m.role === "ai" ? "text-foreground" : "text-muted-foreground"}>
              <span className="mr-2 font-semibold">{m.role === "ai" ? "AI" : "–í—ã"}:</span>
              {m.text}
            </div>
          ))}
        </div>
      </div>
      <div className="rounded-2xl border bg-white p-4">
        <div className="mb-2 flex items-center gap-2 text-sm font-medium">ü§ñ –ü–æ–º–æ—â–Ω–∏–∫</div>
        <div className="text-sm text-muted-foreground mb-3">–ù–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.</div>
        <div className="flex flex-wrap gap-2 mb-3">
          <Button className="rounded-full" onClick={() => setListening((v) => !v)}>{listening ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üéôÔ∏è" : "–ú–∏–∫—Ä–æ—Ñ–æ–Ω üéôÔ∏è"}</Button>
          <Button variant="outline" className="rounded-full" onClick={() => setMessages([{ role: "ai", text: "–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º –≥–æ—Ä–¥–∏—Ç–µ—Å—å." }])}>–°–±—Ä–æ—Å–∏—Ç—å ‚Ü∫</Button>
        </div>
        <div className="flex gap-2">
          <input value={input} onChange={(e) => setInput(e.target.value)} placeholder="–í–∞—à –æ—Ç–≤–µ—Ç..." className="flex-1 rounded-full border px-4 py-2" />
          <Button className="rounded-full" onClick={() => submit(input)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Üí</Button>
        </div>
      </div>
    </div>
  );
}

function pickFollowUp(job: string) {
  const topics = [
    "–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä, –≥–¥–µ –≤—ã —É–ª—É—á—à–∏–ª–∏ –º–µ—Ç—Ä–∏–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ.",
    "–ö–∞–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ –≤—ã –≤–∏–¥–∏—Ç–µ –≤ —ç—Ç–æ–π —Ä–æ–ª–∏ –∏ –∫–∞–∫ –µ–≥–æ —Å–Ω–∏–∑–∏—Ç—å?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ–º —Ñ–∏–¥–±—ç–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∞–ª–∏, –∏ —á–µ–º—É –æ–Ω –Ω–∞—É—á–∏–ª.",
    job ? `–ö–∞–∫ –æ–ø—ã—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏: ${job.slice(0, 80)}‚Ä¶?` : "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é?",
  ];
  return topics[Math.floor(Math.random() * topics.length)];
}