import { useEffect, useMemo, useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

function readLS(key: string) {
  try {
    return localStorage.getItem(key) || "";
  } catch {
    return "";
  }
}

function writeLS(key: string, value: string) {
  try {
    localStorage.setItem(key, value);
  } catch {}
}

function generateCoverLetter(job: string, resume: string) {
  const companyMatch = job.match(
    /(?:–≤|–≤ –∫–æ–º–ø–∞–Ω–∏—é|company|–∫–æ–º–ø–∞–Ω–∏—è)\s+([A-Za-z–ê-–Ø–∞-—è0-9\-\s"']{2,})/i,
  );
  const company = companyMatch?.[1]?.trim().replace(/["']+/g, "");
  const roleMatch = job.match(
    /(?:–Ω–∞|for|–ø–æ–∑–∏—Ü–∏—é|—Ä–æ–ª—å)\s+([A-Za-z–ê-–Ø–∞-—è0-9\-\s"']{2,})/i,
  );
  const role = roleMatch?.[1]?.trim().replace(/["']+/g, "");

  const strengths = (resume || job)
    .split(/\n|,|‚Ä¢|-/)
    .map((s) => s.trim())
    .filter(Boolean)
    .slice(0, 5);

  const bullets = strengths.map((s) => `‚Ä¢ ${s.replace(/^\W+/, "")}`).join("\n");

  return (
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n` +
    `–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è${role ? ` ¬´${role}¬ª` : ""}${company ? ` –≤ ${company}` : ""}. ` +
    `–Ø –ø—Ä–∞–∫—Ç–∏–∫—É—é Data‚Äëdriven –ø–æ–¥—Ö–æ–¥ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. –í–æ—Ç –ø–æ—á–µ–º—É —è –ø–æ–¥—Ö–æ–∂—É: \n\n` +
    `${bullets || "‚Ä¢ –û–ø—ã—Ç –≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n‚Ä¢ –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—Å—å –∏ –±–µ—Ä—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"}\n\n` +
    `–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! üöÄ`
  );
}

// Sessions history
export type Training = {
  id: string;
  ts: number;
  title: string;
  turns: number;
  preview: string;
};
function readHistory(): Training[] {
  try {
    return JSON.parse(localStorage.getItem("interview.history") || "[]");
  } catch {
    return [];
  }
}
function addHistory(s: Training) {
  try {
    const arr = readHistory();
    arr.unshift(s);
    localStorage.setItem("interview.history", JSON.stringify(arr.slice(0, 50)));
  } catch {}
}
function deriveTitle(job: string) {
  const roleMatch = job.match(
    /(?:–Ω–∞|–ø–æ–∑–∏—Ü–∏—é|—Ä–æ–ª—å)\s+([A-Za-z–ê-–Ø–∞-—è0-9\-\s"']{2,})/i,
  );
  return roleMatch?.[1]?.trim() || "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞";
}

export default function Dashboard() {
  const [job, setJob] = useState("");
  const [resume, setResume] = useState("");
  const [letter, setLetter] = useState("");
  const [open, setOpen] = useState(false);
  const [history, setHistory] = useState<Training[]>(readHistory());

  useEffect(() => {
    const j = readLS("interview.job");
    const r = readLS("interview.resume");
    setJob(j);
    setResume(r);
  }, []);

  const name = useMemo(() => {
    const m = resume.match(/(^|\s)([A-Z–ê-–Ø][a-z–∞-—è]+\s+[A-Z–ê-–Ø][a-z–∞-—è]+)/);
    return m?.[2] || "–ì–æ—Å—Ç—å";
  }, [resume]);

  return (
    <div className="space-y-8">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-extrabold tracking-tight sm:text-4xl">
          Hey {name} <span className="align-middle">üëã</span>
        </h1>
        <p className="text-muted-foreground max-w-2xl">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞ –±–∞–∑–µ –ò–ò. –ù–∞—á–Ω–∏—Ç–µ —Å
          –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –≤–∞—à–µ–π
          –≤–∞–∫–∞–Ω—Å–∏–∏.
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card className="shadow-[0_8px_30px_rgba(0,0,0,0.06)]">
          <CardHeader>
            <CardTitle>–ò–Ω—Ç–µ—Ä–≤—å—é –≥–æ—Ç–æ–≤–æ ‚úÖ</CardTitle>
            <CardDescription>
              –í–∞–∫–∞–Ω—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ì–æ–ª–æ—Å –∏ —á–∞—Ç
              –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap items-center gap-3 pt-0">
            <Dialog open={open} onOpenChange={setOpen}>
              <DialogTrigger asChild>
                <Button className="rounded-full bg-black px-6 text-white hover:bg-black/90">
                  –ù–∞—á–∞—Ç—å
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-3xl">
                <DialogHeader>
                  <DialogTitle className="sr-only">
                    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
                  </DialogTitle>
                </DialogHeader>
                <InterviewPanel
                  job={job}
                  onFinish={(session) => {
                    addHistory(session);
                    setHistory(readHistory());
                    setOpen(false);
                  }}
                />
              </DialogContent>
            </Dialog>
            <Button
              variant="outline"
              onClick={() => {
                writeLS("interview.job", "");
                writeLS("interview.resume", "");
                location.href = "/";
              }}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
            </Button>
          </CardContent>
        </Card>

        <Card className="shadow-[0_8px_30px_rgba(0,0,0,0.06)]">
          <CardHeader>
            <CardTitle>–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ ‚úçÔ∏è</CardTitle>
            <CardDescription>
              –ü–∏—Å—å–º–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ. –ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <Textarea
              value={letter}
              onChange={(e) => setLetter(e.target.value)}
              className="min-h-48 rounded-2xl bg-secondary/50"
              placeholder={'–ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"'}
            />
            <div className="flex flex-wrap gap-2">
              <Button
                className="rounded-full"
                onClick={() =>
                  setLetter(
                    letter.trim()
                      ? generateCoverLetter(job + "\n" + Date.now(), resume)
                      : generateCoverLetter(job, resume),
                  )
                }
              >
                {letter.trim() ? "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚ôªÔ∏è" : "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"}
              </Button>
              <Button
                variant="outline"
                className="rounded-full"
                onClick={() => {
                  navigator.clipboard.writeText(letter);
                }}
              >
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å üìã
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card className="shadow-[0_8px_30px_rgba(0,0,0,0.06)]">
        <CardHeader>
          <CardTitle>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</CardTitle>
          <CardDescription>
            –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {history.length === 0 ? (
            <div className="rounded-2xl border bg-white p-4 text-sm text-muted-foreground">
              –ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –∑–¥–µ—Å—å.
            </div>
          ) : (
            <ul className="space-y-2">
              {history.map((s) => (
                <li
                  key={s.id}
                  className="flex items-center justify-between rounded-xl border bg-white px-4 py-3 text-sm"
                >
                  <div className="min-w-0">
                    <div className="truncate font-medium">{s.title}</div>
                    <div className="truncate text-muted-foreground">
                      {new Date(s.ts).toLocaleString()} ‚Ä¢ {s.turns} —Å–æ–æ–±—â–µ–Ω–∏–π
                    </div>
                  </div>
                  <Button variant="ghost" className="rounded-full">
                    –û—Ç–∫—Ä—ã—Ç—å
                  </Button>
                </li>
              ))}
            </ul>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function InterviewPanel({
  job,
  onFinish,
}: {
  job: string;
  onFinish: (s: Training) => void;
}) {
  const [messages, setMessages] = useState<
    { role: "ai" | "user"; text: string }[]
  >([
    {
      role: "ai",
      text: "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è. –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ.",
    },
  ]);
  const [input, setInput] = useState("");
  const [listening, setListening] = useState(false);

  const speak = (text: string) => {
    try {
      const utter = new SpeechSynthesisUtterance(text);
      utter.lang = "ru-RU";
      speechSynthesis.cancel();
      speechSynthesis.speak(utter);
    } catch {}
  };

  useEffect(() => {
    const last = messages[messages.length - 1];
    if (last?.role === "ai") speak(last.text);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [messages.length]);

  useEffect(() => {
    if (!listening) return;
    // @ts-ignore
    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SR) return;
    // @ts-ignore
    const rec = new SR();
    rec.lang = "ru-RU";
    rec.interimResults = false;
    rec.onresult = (e: any) => {
      const text = Array.from(e.results)
        .map((r: any) => r[0].transcript)
        .join(" ");
      submit(text);
    };
    rec.onend = () => setListening(false);
    rec.start();
    return () => {
      try {
        rec.stop();
      } catch {}
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [listening]);

  const submit = (text: string) => {
    if (!text.trim()) return;
    const next = text.trim();
    setMessages((m) => [...m, { role: "user", text: next }]);
    const followUp =
      next.length < 20
        ? "–†–∞—Å–∫—Ä–æ–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫–æ–π –±—ã–ª –≤–∞—à –≤–∫–ª–∞–¥?"
        : pickFollowUp(job);
    setMessages((m) => [
      ...m,
      { role: "user", text: next },
      { role: "ai", text: followUp },
    ]);
    setInput("");
  };

  return (
    <div className="flex h-[70vh] flex-col">
      <div className="flex items-center justify-between border-b px-2 py-1 text-sm text-muted-foreground">
        <div className="truncate">{deriveTitle(job)} ‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</div>
        <Button
          variant="ghost"
          className="rounded-full"
          onClick={() =>
            onFinish({
              id: crypto.randomUUID(),
              ts: Date.now(),
              title: deriveTitle(job),
              turns: messages.length,
              preview: messages[messages.length - 1]?.text || "",
            })
          }
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ
        </Button>
      </div>
      <div className="flex-1 overflow-y-auto space-y-3 p-3">
        {messages.map((m, i) => (
          <div
            key={i}
            className={m.role === "ai" ? "flex" : "flex justify-end"}
          >
            <div
              className={
                m.role === "ai"
                  ? "max-w-[80%] rounded-2xl border bg-white px-4 py-2"
                  : "max-w-[80%] rounded-2xl bg-black px-4 py-2 text-white"
              }
            >
              {m.text}
            </div>
          </div>
        ))}
      </div>
      <div className="border-t p-2">
        <div className="flex gap-2">
          <Button
            variant="outline"
            className="rounded-full"
            onClick={() => setListening((v) => !v)}
          >
            {listening ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üéôÔ∏è" : "–ú–∏–∫—Ä–æ—Ñ–æ–Ω üéôÔ∏è"}
          </Button>
          <input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            className="flex-1 rounded-full border px-4 py-2"
          />
          <Button className="rounded-full" onClick={() => submit(input)}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Üí
          </Button>
        </div>
      </div>
    </div>
  );
}

function pickFollowUp(job: string) {
  const topics = [
    "–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä, –≥–¥–µ –≤—ã —É–ª—É—á—à–∏–ª–∏ –º–µ—Ç—Ä–∏–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ.",
    "–ö–∞–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ –≤—ã –≤–∏–¥–∏—Ç–µ –≤ —ç—Ç–æ–π —Ä–æ–ª–∏ –∏ –∫–∞–∫ –µ–≥–æ —Å–Ω–∏–∑–∏—Ç—å?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ–º —Ñ–∏–¥–±—ç–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∞–ª–∏, –∏ —á–µ–º—É –æ–Ω –Ω–∞—É—á–∏–ª.",
    job
      ? `–ö–∞–∫ –æ–ø—ã—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏: ${job.slice(0, 80)}‚Ä¶?`
      : "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é?",
  ];
  return topics[Math.floor(Math.random() * topics.length)];
}
